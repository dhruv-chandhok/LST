var DATE_RANGE_2022 = ee.Filter.dayOfYear(222,222);
var YEAR_RANGE_2022 = ee.Filter.calendarRange(2022,2023,'year');
var STUDYBOUNDS_2022 = (geometry)

var DISPLAY = true;

Map.setOptions('SATELLITE');

Map.setCenter (-0.5252498111323423,51.47634583576247);

var LC09_bands_2022 = ['ST_B10', 'QA_PIXEL']; 
var bandName_2022 = ['ST', 'QA_PIXEL'];

function cloudMask(image) {
  var qa_2022 = image.select('QA_PIXEL');
  var mask_2022 = qa_2022.bitwiseAnd(1 << 3)
    .or(qa_2022.bitwiseAnd(1 << 4));
  return image.updateMask(mask_2022.not());
}

var L9_2022 = ee.ImageCollection("LANDSAT/LC09/C02/T1_L2")
  .select('ST_B10', 'QA_PIXEL')
  .filterBounds(STUDYBOUNDS_2022)
  .filter(DATE_RANGE_2022)
  .filter(YEAR_RANGE_2022)
  .map(cloudMask);

var filtered_L9_2022 = L9_2022.filter(ee.Filter.lt('CLOUD_COVER', 60));


function applyScaleFactors(image) {
  var thermalBands_2022 = image.select('ST_B10').multiply(0.00341802).add(149.0) 
  .subtract(273.15); 
  return image.addBands(thermalBands_2022, null, true);
}


var landsatST_2022 = filtered_L9_2022.map(applyScaleFactors);


var mean_LandsatST_2022 = landsatST_2022.mean();

var clip_mean_ST_2022 = mean_LandsatST_2022.clip(STUDYBOUNDS_2022);

Map.addLayer(clip_mean_ST_2022, {
  bands: 'ST_B10',
  min: 25, max: 50,
  palette: ['blue', 'white', 'red']}, "ST_2022", DISPLAY);
  
  print("Stats for 2022")
  
var Slough_2022 = clip_mean_ST_2022.reduceRegions({
  collection: Affluent,
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.min().combine(ee.Reducer.max(), '', true)
  }),
  scale: 30
});

print(Slough_2022);

// Add a legend with a colour palette and descriptions

var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
 
var legendTitle = ui.Label({
  value: 'Land Surface Temperature 2022',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
legend.add(legendTitle);
 
var makeRow = function(color, name) {
 
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
var palette = [ '0000ff', 'ffffff', 'ff0000'];
 
var names = ['<30C','30-40C','>40C'];
 
for (var i = 0; i < 3; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
Map.add(legend);
