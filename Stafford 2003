// Set study parameters

var DATE_RANGE_2003 = ee.Filter.dayOfYear(220, 220);
var YEAR_RANGE_2003 = ee.Filter.calendarRange(2003, 2004, 'year');
var STUDYBOUNDS_2003 = geometry;
var DISPLAY = true;

Map.setOptions('SATELLITE');

Map.setCenter(-2.118068167082685,52.81509779715252, 12);

var LC05_bands_2003 = ['ST_B6', 'QA_PIXEL'];
var bandName_2003 = ['ST', 'QA_PIXEL'];

function cloudMask(image) {
var qa_2003 = image.select('QA_PIXEL');
var mask_2003 = qa_2003.bitwiseAnd(1 << 3)
.or(qa_2003.bitwiseAnd(1 << 4));
return image.updateMask(mask_2003.not());
}

var L5_2003 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
.select('ST_B6', 'QA_PIXEL')
.filterBounds(STUDYBOUNDS_2003)
.filter(DATE_RANGE_2003)
.filter(YEAR_RANGE_2003)
.map(cloudMask);

var filtered_L5_2003 = L5_2003.filter(ee.Filter.lt('CLOUD_COVER', 60));

function applyScaleFactors(image) {
var thermalBands_2003 = image.select('ST_B6').multiply(0.00341802).add(149.0)
.subtract(273.15);
return image.addBands(thermalBands_2003, null, true);
}

var landsatST_2003 = filtered_L5_2003.map(applyScaleFactors);

var mean_LandsatST_2003 = landsatST_2003.mean();

var clip_mean_ST_2003 = mean_LandsatST_2003.clip(STUDYBOUNDS_2003);

Map.addLayer(clip_mean_ST_2003, {
bands: 'ST_B6',
min: 15, max: 45,
palette: ['blue', 'white', 'red']
}, "ST_2003", DISPLAY);

print("Stats for 2003")

var Stafford_2003 = clip_mean_ST_2003.reduceRegions({
collection: Affluent,
reducer: ee.Reducer.mean().combine({
reducer2: ee.Reducer.min().combine(ee.Reducer.max(), '', true)
}),
scale: 30
});

print(Stafford_2003);

// Add a legend with a colour palette and descriptions

var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
 
var legendTitle = ui.Label({
  value: 'Land Surface Temperature 2003',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
legend.add(legendTitle);
 
var makeRow = function(color, name) {
 
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
var palette = [ '0000ff', 'ffffff', 'ff0000'];
 
var names = ['<30C','30-40C','>40C'];
 
for (var i = 0; i < 3; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
Map.add(legend);
